data <- readDiscreteCharacterData("data/sequence_data_update.fst")
#data_codon = data.translateCharacters("Codon")
#data_translated <- data.translateCharacters("Codon", treatAmbiguousAsMissing = TRUE)


n_species <- data.ntaxa()
n_branches <- 2 * n_species - 3
taxa <- data.taxa()

out_group = clade("Lemur_catta")

# tree topology
topology ~ dnUniformTopology(taxa, outgroup = out_group) 
for (i in 1:n_branches) {
 bl[i] ~ dnExponential(10.0)
}
psi := treeAssembly(topology, bl)

# total tree length (just for monitoring)
TL := sum(bl)

# Codon substitution process
kappa ~ dnUniform(lower=0, upper=10)
nucstat ~ dnDirichlet([1.0, 1.0, 1.0, 1.0])

# Paramètres Omega
omega ~ dnUniform(lower = 0, upper = 2)  
omega1 ~ dnUniform(lower = 0, upper = 2)  # Polygame
omega2 ~ dnUniform(lower = 0, upper = 2)  # Monogame

# Substitution matrices pour les deux types d'espèces
Q := fnCodonHKY(omega = omega1, kappa = kappa, baseFrequencies = nucstat) #Intérieur branches
Q1 := fnCodonHKY(omega = omega1, kappa = kappa, baseFrequencies = nucstat)  # Polygame
Q2 := fnCodonHKY(omega = omega2, kappa = kappa, baseFrequencies = nucstat)  # Monogame

# Lecture manuelle du fichier des systèmes d'appariement
mating_systems <- v(1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0)
# Ce vecteur doit correspondre à l'ordre des espèces dans le fichier de données de séquences

# Boucle pour assigner omega1 ou omega2 aux feuilles externes de l'arbre
Q_list <- VectorDistributionQ()

for (i in 1:n_species) {
    # Vérifier si l'espèce est polygame (1) ou monogame (0)
    if (mating_systems[i] == 1) {
        Q_list[i] <- Q1  # Polygame -> omega1
    } else {
        Q_list[i] <- Q2  # Monogame -> omega2
    }
}

seq ~ dnPhyloCTMC( tree=psi, Q=Q, type="Codon" ) 
#seq.clamp( data_codon )

my_model = model(psi)

# moves
moves = VectorMoves()
moves.append(mvNNI(topology, weight=3.0))
moves.append(mvSPR(topology, weight=3.0))
moves.append( mvScale(omega, lambda=1.0, weight=1.0) )
moves.append(mvScale(kappa, weight=1.0))
for (i in 1:n_branches) {
   moves.append(mvScale(bl[i], weight=1.0))
}

monitors[1] = mnModel(filename="output/SEMG2.log", printgen=10, separator = TAB)
monitors[2] = mnFile(psi,filename="output/SEMG2.trees", printgen=10, separator = TAB)
monitors[3] = mnScreen(printgen=100, TL)

# Make the analysis object
analysis = mcmc(my_model, monitors, moves)
# Run the MCMC
analysis.run(10000)

# Post-analysis: constructing the maximum a posteriori tree
treetrace = readTreeTrace("output/SEMG2.trees", treetype="non-clock", burnin=0.1)
map_tree = mapTree(treetrace, "output/SEMG2.tree")

